#include<stdio.h>
#include<math.h>
#include<algorithm>
using namespace std;
#define N 100007

using namespace std;

struct point
{
	double x, y;
}f[N];
int a[N];
int n;
bool cmp(point a, point b) {
	if (a.x != b.x) return a.x < b.x;
	else return a.y < b.y;
}
bool cmp_y(int id1, int id2) {
	return f[id1].y < f[id2].y;
}
double getdis(const point & a, const point & b) {
	double x = a.x - b.x;
	double y = a.y - b.y;
	return sqrt(x * x + y * y);
}
double solve(int l, int r) {
	double ans = 0;
	if (r - l + 1 <= 3) 
	{
		if (r - l + 1 == 1) return ans;
		ans = getdis(f[l], f[l + 1]);
		if (r - l + 1 == 2) return ans;
		for (int i = l; i < r; ++i) {
			for (int j = i + 1; j <= r; ++j) {
				ans = min(ans, getdis(f[i], f[j]));
			}
		}
		return ans;
	}
	int m = (l + r)/2;
	double s1 = solve(l, m);
	double s2 = solve(m + 1, r);
	ans = min(s1, s2);
	int k = 0;
	for (int i = m-1 ; i >= l && f[m].x - f[i].x <= ans; --i) a[k++] = i;
	for (int i=m+1; i <= r && f[i].x - f[m].x <= ans; ++i) a[k++] = i;
	sort(a, a + k, cmp_y);
	for (int i = 0; i < k; ++i) {
		for (int j = i + 1; j < k && j <= i + 7; ++j) {
			ans = min(ans, getdis(f[a[i]], f[a[j]]));
		}
	}
	return ans;
}
int main() {
	while (~scanf("%d", &n)) {
		if (!n) break;
		for (int i = 0; i < n; ++i) ~scanf("%lf%lf", &f[i].x, &f[i].y);
		sort(f, f + n, cmp);
		printf("%.2lf\n", solve(0, n - 1) / 2.0);
	}
	return 0;
}
